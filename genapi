#!/bin/bash

mkdir -p output_results/

# help message

print_help() {
echo "Usage: GenMat [options] [--name <analysis name>]

        -n, --name      Chosen analysis name.
                        Default: date in yyyy-mm-dd format
        -p, --threads   Number of threads used for running the analysis.
                        Default: 1
        -a, --coverage  Alignment coverage for the shorter sequence for CD-HIT-EST.
                        Default: 0.8
        -c, --identity  Sequence identity threshold for CD-HIT-EST.
                        Default: 0.9
        -x, --geneCov1  First minimum alignment length threshold.
                        Default: 0.25
        -y, --geneCov2  Second minimum alignment length threshold.
        2                Default: 0.50
        -w, --geneIden1 First minimum gene identity threshold.
                        Default: 0.98
        -z, --geneIden2 Second minimum gene identity threshold.
                        Default: 0.90
        -l, --geneLen   Minimum gene length. Shorter than the threshold genes are
                        excluded from the analysis.
                        Default: 150
        -v, --version   Print the tool version.
        -h, --help      Print this message.
        " >&2 ;
}


# optional arguments for the tool
OPTS=`getopt -o vhp:a:c:n:x:y:w:z:l: --long threads:,help,version,coverage:,identity:,name:,geneCov1:,geneCov2:,geneIden1:,geneIden2:,geneLen: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"


if [ $? != 0 ]
then
        echo "Failed parsing options."
        print_help
        exit 1
fi


NAME=`date +%Y-%m-%d`
THREADS=1
HELP=false
VERSION=false
ALIGNMENT_COVERAGE=0.8
IDENTITY=0.9
geneCov1=0.25
geneCov2=0.50
geneIden1=0.98
geneIden2=0.90
geneLen=150

while true; do
  case "$1" in
    -n | --name ) NAME="$2"; shift 2 ;;
    -p | --threads ) THREADS="$2"; shift 2 ;;
    -h | --help )    HELP=true; shift ;;
    -v | --version ) VERSION=true; shift ;;
    -a | --coverage ) ALIGNMENT_COVERAGE="$2"; shift 2 ;;
    -c | --identity ) IDENTITY="$2"; shift 2 ;;
    -x | --geneCov1 ) geneCov1="$2"; shift 2;;
    -y | --geneCov2 ) geneCov2="$2"; shift 2;;
    -w | --geneIden1 ) geneIden1="$2"; shift 2;;
    -z | --geneIden2 ) geneIden2="$2"; shift 2;;
    -l | --geneLen ) geneLen="$2"; shift 2;;
    -- ) shift; break ;;
    * ) echo "Internal error!"; exit 1 ;;
  esac
done


if $HELP
then
        print_help
	exit 2
fi

if $VERSION
then
        echo "GenMat v1.0 (https://github.com/MigleSur/GenMat)
Developed by: Migle Gabrielaite
Contact: migle.gabrielaite@gmail.com"
	exit 2
fi

# checking if the required programs are installed
if ! [ -x "$(command -v blastn)" ]; then
 	echo 'Error: blast is not installed or not included in the path.' >&2
 	exit 1
fi

if ! [ -x "$(command -v cd-hit-est)" ]; then
 	echo 'Error: CD-HIT is not installed or not included in the path.' >&2
 	exit 1
fi

if ! [ -x "$(command -v bedtools)" ]; then
 	echo 'Error: bedtools is not installed or not included in the path.' >&2
 	exit 1
fi

# printing all the settings to a settings file

echo "Analysis name: $NAME
Number of threads:$THREADS
Alignment coverage threshold for CD-HIT-EST: $ALIGNMENT_COVERAGE
Identity threshold for CD-HIT-EST: $IDENTITY
First minimum threshold for gene coverage: $geneCov1
Second minimum threshold for gene coverage: $geneCov2
First minimum threshold for gene identity: $geneIden1
Second minimum threshold for gene identity: $geneIden2
Minimum gene length used for analysis: $geneLen" > ${NAME}_settings



# extracting ffn and scaffolds.fasta files from gff files

for file in ./*.gff
do
	file_start=`echo ${file} | sed 's/\.gff//'`
	awk '/##FASTA/,0{if (!/##FASTA/)print}' < $file > ${file_start}.fasta
	
	sed '/##FASTA/Q' < $file | grep -v "##" > ${file_start}_temp.tsv
	cat ${file_start}_temp.tsv | awk -F'\t' '{print $1, $4, $5}' | tr " " "\t" > tmp00	
	cat ${file_start}_temp.tsv | awk -F'ID=' '{print $2}' | sed -e 's/;.*//' > tmp01
	cat ${file_start}_temp.tsv | awk -F'product=' '{print $2}' | sed -e 's/;.*//' | tr " " "_" > tmp02

	paste tmp01 tmp02 -d _ > tmp03
	paste tmp00 tmp03 -d '\t'  > ${file_start}.bed
	
	bedtools getfasta -fi ${file_start}.fasta -bed ${file_start}.bed -fo ${file_start}.ffn -name	
	rm -f tmp00 tmp01 tmp02 tmp03 ${file_start}.bed ${file_start}_temp.tsv

done

# creating a file of all the genes and clustering it with cd-hit-est
ALLGENES=output_results/all_genes_${NAME}
ls *.ffn > output_results/sample_list.txt

sed -i "s/.ffn//g" output_results/sample_list.txt

cat *.ffn > ${ALLGENES}

#sed -i "s/ /_/g" ${ALLGENES}

CLUSTERED=output_results/clustered_genes_${NAME}.ffn

echo -en "-----CLUSTERING WITH CD-HIT-EST-----\n"

cd-hit-est -i ${ALLGENES} -o ${CLUSTERED} -M 0 -G 0 -d 200 -T ${THREADS} -aS ${ALIGNMENT_COVERAGE} -c ${IDENTITY}

rm -f output_results/all_genes_${NAME}

# blast each sequence to the clustered database

echo -en "-----FINDING THE BEST ALIGNMENT FOR EACH GENE SEQUENCE-----\n"
gene_db_alignment_against_seq.sh  ${NAME} ${geneCov1} ${geneCov2} ${geneIden1} ${geneIden2}

echo -en "-----CREATING GENE PRESENCE/ABSENCE MATRIX-----\n"
convert_gene_alignment_to_binary.sh  ${NAME} ${geneCov1} ${geneCov2} ${geneIden1} ${geneIden2} ${geneLen}

echo -en "-----THE ANALYSIS IS DONE-----\n"

rm -f *.fasta 
rm -f *.fasta.fai
rm -f *.ffn

